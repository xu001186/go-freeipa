// Code generated by `github.com/ccin2p3/go-freeipa/gen` - DO NOT EDIT.

package freeipa;

import (
  "time"
	"encoding/json"
  "fmt"
  //"reflect"
  "strconv"
)

var apiVersion = "{{.Schema.Version}}"

type request struct {
  Method string `json:"method"`
  Params []interface{} `json:"params"`
}

{{range .Schema.Commands}}
/*
{{TrimSpace .Doc}}
*/
func (c *Client) {{.UpperName}}(
  {{range .PosParams -}}
    {{.LowerName}} {{ToGoType .Type}}, // {{.Doc}}
  {{end -}}
  reqArgs *{{.UpperName}}Args,
  optArgs *{{.UpperName}}OptionalArgs, // can be nil
) (*{{.UpperName}}Result, error) {
  if reqArgs == nil {
    return nil, fmt.Errorf("reqArgs cannot be nil")
  }
  kwp := {{.LowerName}}KwParams{
    {{.UpperName}}Args: reqArgs,
    {{.UpperName}}OptionalArgs: optArgs,
    Version: apiVersion,
  }
  req := request{
    Method: "{{.Name}}",
    Params: []interface{}{
      []interface{}{
        {{- range .PosParams}}{{.LowerName}}, {{end -}}
      }, &kwp},
  }
  readCloser, e := c.exec(&req)
  if e != nil {
    return nil, e
  }
  defer readCloser.Close()
  var res {{.LowerName}}Response
	if e := json.NewDecoder(readCloser).Decode(&res); e != nil {
		return nil, e
	}
	if res.Error != nil {
		return nil, res.Error
	}
  if res.Result == nil {
    return nil, fmt.Errorf("missing result in response")
  }
  return res.Result, nil
}

type {{.UpperName}}Args struct {
  {{range .KwParams}}
  {{- if .Required}}
    /*
{{.Label}}
{{.Doc}}
    */
    {{.UpperName}} {{if .Multivalue}}[]{{end}}{{ToGoType .Type}} `json:"{{.Name}},omitempty"`
  {{end -}}
  {{end -}}
}

type {{.UpperName}}OptionalArgs struct {
  {{range .KwParams}}
  {{- if not .Required}}
    /*
{{.Label}}
{{.Doc}}
    */
    {{.UpperName}} *{{if .Multivalue}}[]{{end}}{{ToGoType .Type}} `json:"{{.Name}},omitempty"`
  {{end -}}
  {{end -}}
}

type {{.LowerName}}KwParams struct {
  *{{.UpperName}}Args
  *{{.UpperName}}OptionalArgs

  /*
  Automatically set.
  Used by the server to determine whether to accept the request.
  */
  Version string `json:"version"`
}

type {{.LowerName}}Response struct {
	Error  *Error      `json:"error"`
	Result *{{.UpperName}}Result `json:"result"`
}
type {{.UpperName}}Result struct {
  {{$callLowerName := .LowerName }}
  {{$cmd := .}}
  {{range .Output}}
    /*
{{.Doc}}
    ({{if .Required}}required{{else}}optional{{end}})
    */
    {{ if eq "failed" .LowerName}}
    {{.UpperName}} FailedOperations`json:"failed,omitempty"`
    {{ else }}
    {{.UpperName}} {{if not .Required}}*{{end}}{{if .Multivalue}}[]{{end}}{{.GoType $cmd}} `json:"{{.Name}},omitempty"`
    {{ end }}
  {{end -}}
}

func (t *{{.UpperName}}Result) String() string {
  if t == nil {
    return "<nil>"
  }
  b, e := json.Marshal(t)
  if e != nil {
    return fmt.Sprintf("{{.UpperName}}Result[failed json.Marshal: %v]", e)
  }
  return fmt.Sprintf("{{.UpperName}}Result%v", string(b))
}
{{end}}

{{range .Schema.Classes}}
type {{.UpperName}} struct {
  {{range .Params}}
    /*
{{.Label}}
{{.Doc}}
    */
    {{.UpperName}} {{if not .Required}}*{{end}}{{if .Multivalue}}[]{{end}}
    {{- ToGoType .Type}} `json:"{{.Name}},omitempty"`
  {{end -}}
}

func (t *{{.UpperName}}) String() string {
  if t == nil {
    return "<nil>"
  }
  b, e := json.Marshal(t)
  if e != nil {
    return fmt.Sprintf("{{.UpperName}}[failed json.Marshal: %v]", e)
  }
  return fmt.Sprintf("{{.UpperName}}%v", string(b))
}

type json{{.UpperName}} struct {
  {{range .Params}}
    {{.UpperName}} interface{} `json:"{{.Name}}"`
  {{end -}}
}

func (out *{{.UpperName}}) UnmarshalJSON(data []byte) error {
  var in json{{.UpperName}}
  if e := json.Unmarshal(data, &in); e != nil {
    return e
  }
  {{range .Params}}
  if {{if .Required}}true{{else}}in.{{.UpperName}} != nil{{end}} {
    raw := in.{{.UpperName}}
    plainV, plainOk := raw.({{ToGoType .Type}})
    sliceWrapperV, sliceWrapperOk := raw.([]interface{})
    var sliceV []{{ToGoType .Type}}
    sliceOk := sliceWrapperOk
    if sliceWrapperOk {
      for _, rawItem := range sliceWrapperV {
        {{if eq "int" (ToGoType .Type)}}
        itemV, itemOk := rawItem.(string)
        {{else}}
        itemV, itemOk := rawItem.({{ToGoType .Type}})
        {{end}}
        if !itemOk {
          {{if eq "bool" (ToGoType .Type)}}
          // See https://github.com/tehwalris/go-freeipa/issues/3
          // Sometimes IPA returns ["TRUE"] as a boolean value
          strV, strOk := rawItem.(string)
          if strOk {
            boolV, err := strconv.ParseBool(strV)
            if err != nil {
              sliceOk = false
              break
            }

            itemV = boolV
          } else {
            sliceOk = false
            break
          }
          {{ else if eq "time.Time" (ToGoType .Type) }}
          // See https://github.com/ccin2p3/go-freeipa/issues/1
          mapV, mapVOk := rawItem.(map[string]interface{})
          if mapVOk {
            timeV, err := tryParseFreeIPADatetimeMap(mapV)
            if err != nil {
              sliceOk = false
              break
            }

            itemV = timeV
          } else {
            sliceOk = false
            break
          }
          {{else}}
          sliceOk = false
          break
          {{end}}

        }
        {{if eq "int" (ToGoType .Type)}}
        intV, e := strconv.Atoi(itemV)
        if e != nil {
          return fmt.Errorf("unexpected value for field {{.UpperName}}: %v (hit string which couldn't be converted to int)", raw)
        }
        sliceV = append(sliceV, intV)
        {{else}}
        sliceV = append(sliceV, itemV)
        {{end}}
      }
    }
    {{if .Multivalue}}
      if plainOk {
        out.{{.UpperName}} = {{if not .Required}}&{{end}}[]{{ToGoType .Type}}{plainV}
      } else if sliceOk {
        {{if .Required}}
          if len(sliceV) < 1 {
            return fmt.Errorf("unexpected value for field {{.UpperName}}: %v; expected at least one element", raw)
          }
        {{end}}
        out.{{.UpperName}} = {{if not .Required}}&{{end}}sliceV
      } 
        //else {
        //return fmt.Errorf("unexpected value for field {{.UpperName}}: %v (%v)", raw, reflect.TypeOf(raw))
      //}
    {{else}}
      if plainOk {
        out.{{.UpperName}} = {{if not .Required}}&{{end}}plainV
      } else if sliceOk {
        {{if .Required}}
          if len(sliceV) != 1 {
            return fmt.Errorf("unexpected value for field {{.UpperName}}: %v; expected exactly one element", raw)
          }
          out.{{.UpperName}} = sliceV[0]
        {{else}}
          if len(sliceV) == 1 {
            out.{{.UpperName}} = &sliceV[0]
          } else if len(sliceV) > 1 {
            return fmt.Errorf("unexpected value for field {{.UpperName}}: %v; expected at most one element", raw)
          }
        {{end}}
      }
      // else {
       // return fmt.Errorf("unexpected value for field {{.UpperName}}: %v (%v)", raw, reflect.TypeOf(raw))
      //}
    {{end}}
  }
  {{end -}}
  return nil
}
{{end}}

{{range .Errs}}
const {{.Name}}Code = {{.Errno}}
{{end}}